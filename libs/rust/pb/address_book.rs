// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `protos/contacts/address_book.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct AddressBook {
    // message fields
    pub people: ::protobuf::RepeatedField<super::person::Person>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddressBook {
    fn default() -> &'a AddressBook {
        <AddressBook as ::protobuf::Message>::default_instance()
    }
}

impl AddressBook {
    pub fn new() -> AddressBook {
        ::std::default::Default::default()
    }

    // repeated .Contacts.Person people = 1;


    pub fn get_people(&self) -> &[super::person::Person] {
        &self.people
    }
    pub fn clear_people(&mut self) {
        self.people.clear();
    }

    // Param is passed by value, moved
    pub fn set_people(&mut self, v: ::protobuf::RepeatedField<super::person::Person>) {
        self.people = v;
    }

    // Mutable pointer to the field.
    pub fn mut_people(&mut self) -> &mut ::protobuf::RepeatedField<super::person::Person> {
        &mut self.people
    }

    // Take field
    pub fn take_people(&mut self) -> ::protobuf::RepeatedField<super::person::Person> {
        ::std::mem::replace(&mut self.people, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AddressBook {
    fn is_initialized(&self) -> bool {
        for v in &self.people {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.people)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.people {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.people {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddressBook {
        AddressBook::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::person::Person>>(
                "people",
                |m: &AddressBook| { &m.people },
                |m: &mut AddressBook| { &mut m.people },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AddressBook>(
                "AddressBook",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AddressBook {
        static instance: ::protobuf::rt::LazyV2<AddressBook> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AddressBook::new)
    }
}

impl ::protobuf::Clear for AddressBook {
    fn clear(&mut self) {
        self.people.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddressBook {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddressBook {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"protos/contacts/address_book.proto\x12\x08Contacts\x1a\x1cprotos/con\
    tacts/person.proto\"7\n\x0bAddressBook\x12(\n\x06people\x18\x01\x20\x03(\
    \x0b2\x10.Contacts.PersonR\x06peopleB*Z\x0c/pb/contacts\xaa\x02\x0bPb.Co\
    ntacts\xca\x02\x0bPb/ContactsJ\x9a\x02\n\x06\x12\x04\x05\0\x11\x01\n_\n\
    \x01\x0c\x12\x03\x05\0\x122U*\n\x20Example\x20entity\x20Protocol\x20Buff\
    ers\n\x20Author:\x20Zverev\x20Valeriy\x20<zverevvaleriy@gmail.com>\n\n\
    \x08\n\x01\x02\x12\x03\x07\0\x11\n\x08\n\x01\x08\x12\x03\t\0#\n\t\n\x02\
    \x08\x0b\x12\x03\t\0#\n\x08\n\x01\x08\x12\x03\n\0(\n\t\n\x02\x08%\x12\
    \x03\n\0(\n\x08\n\x01\x08\x12\x03\x0b\0%\n\t\n\x02\x08)\x12\x03\x0b\0%\n\
    \t\n\x02\x03\0\x12\x03\r\0&\n\n\n\x02\x04\0\x12\x04\x0f\0\x11\x01\n\n\n\
    \x03\x04\0\x01\x12\x03\x0f\x08\x13\n\x0b\n\x04\x04\0\x02\0\x12\x03\x10\
    \x04(\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x10\x04\x0c\n\x0c\n\x05\x04\0\
    \x02\0\x06\x12\x03\x10\r\x1c\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x10\x1d\
    #\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x10&'b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
